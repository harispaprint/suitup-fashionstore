"""
Django settings for suitup project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv
import boto3

def get_parameter(name):
    ssm = boto3.client('ssm', region_name='us-west-2')  # e.g., 'us-east-1'
    response = ssm.get_parameter(Name=name, WithDecryption=True)
    return response['Parameter']['Value']

# Load .env file
load_dotenv()

deployment = True

# Use environment variables
if deployment:
    DEBUG = False
    try:
        SECRET_KEY = get_parameter('/suitup/production/SECRET_KEY')
    except:
        # For local development only
        SECRET_KEY = 'django-insecure-development-key-change-in-production'
    
else:
    SECRET_KEY = os.getenv('SECRET_KEY')
    DEBUG = True

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# ALLOWED_HOSTS = ['django-suitup3-env.eba-eg7dz4hm.us-west-2.elasticbeanstalk.com']

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'category',
    'accounts',
    'store',
    'carts',
    'myadmin',
    'orders',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.github',
    'storages',
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend', 
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'accounts.middleware.DisableCacheMiddleware',
    'allauth.account.middleware.AccountMiddleware', #add this
]

ROOT_URLCONF = 'suitup.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'category.context_processors.menu_links',
                'carts.context_processors.counter',
                'store.context_processors.breadcrumbs_processor',
                'store.context_processors.wishlist_counter',
            ],
        },
    },
]

WSGI_APPLICATION = 'razorpay_payment.wsgi.application'
#Social login settings

SOCIALACCOUNT_LOGIN_ON_GET=True

LOGIN_REDIRECT_URL = 'success'

WSGI_APPLICATION = 'suitup.wsgi.application'

AUTH_USER_MODEL = 'accounts.Account'

if deployment:
    SOCIALACCOUNT_PROVIDERS = {
        'google': {
            'APP': {
                'client_id': get_parameter('/suitup/production/CLIENT_ID_GOOGLE'),
                'secret': get_parameter('/suitup/production/SECRET_KEY_GOOGLE'),
            
            },
            'SCOPE': ['profile','email',],
            'AUTH_PARAMS': {'access_type': 'online'},
            'METHOD': 'oauth2',
            'VERIFIED_EMAIL': True,
        },
        'github': {
            'APP': {
                'client_id': get_parameter('/suitup/production/CLIENT_ID_GITHUB'),
                'secret': get_parameter('/suitup/production/SECRET_KEY_GITHUB'),
            }
        }
    
    }
else:
    SOCIALACCOUNT_PROVIDERS = {
        'google': {
            'APP': {
                'client_id': os.getenv('CLIENT_ID_GOOGLE'),
                'secret': os.getenv('SECRET_KEY_GOOGLE'),
            
            },
            'SCOPE': ['profile','email',],
            'AUTH_PARAMS': {'access_type': 'online'},
            'METHOD': 'oauth2',
            'VERIFIED_EMAIL': True,
        },
        'github': {
            'APP': {
                'client_id': os.getenv('CLIENT_ID_GITHUB'),
                'secret': os.getenv('SECRET_KEY_GITHUB'),
            }
        }
    
    }


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

if deployment:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': get_parameter('/suitup/production/DB_NAME'),
            'USER': get_parameter('/suitup/production/DB_USER'),
            'PASSWORD': get_parameter('/suitup/production/DB_PASSWORD'),
            'HOST': get_parameter('/suitup/production/DB_HOST'),
            'PORT': get_parameter('/suitup/production/DB_PORT'),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DB_NAME'),
            'USER': os.getenv('DB_USER'),
            'PASSWORD': os.getenv('DB_PASSWORD'),
            'HOST': os.getenv('DB_HOST'),
            'PORT': os.getenv('DB_PORT', '5432'),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/


if deployment:
    AWS_ACCESS_KEY_ID = get_parameter('/suitup/production/AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = get_parameter('/suitup/production/AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = 'suitup1-bucket'
    AWS_S3_SIGNATURE_NAME = 's3v4'
    AWS_S3_REGION_NAME = "us-west-2"  # e.g., 'us-east-1'

    # AWS S3 static and media file settings
    AWS_S3_FILE_OVERWRITE = False
    AWS_S3_VERIFY = True
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',
    }
    AWS_DEFAULT_ACL = 'public-read'
    AWS_LOCATION = 'static'

    STATICFILES_DIRS = [
        'suitup/static',
    ]
    STATIC_ROOT = BASE_DIR / "staticfiles"
    STATIC_URL = f'https://{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com/'

    STORAGES = {
        #media Files
        "default": {
            "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
        },
        # CSS and JS file management
        "staticfiles": {
            "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
        },
    }
else:
    STATIC_URL = '/static/'
    STATIC_ROOT = BASE_DIR / 'static'

    STATICFILES_DIRS = [
        BASE_DIR / 'suitup/static',
    ]

    MEDIA_URL = '/media/'
    MEDIA_ROOT = BASE_DIR / 'media'


# Add the domain for the production or local server
from django.contrib.sites.shortcuts import get_current_site

# STATIC_URL_PREFIX = 'http://127.0.0.1:8000'  # Adjust for production environment

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

from django.contrib.messages import constants as messages

MESSAGE_TAGS = {
    messages.ERROR: 'danger',
}

WKHTMLTOPDF_CMD = r'C:\Program Files\wkhtmltopdf\bin\wkhtmltopdf.exe'

# Fetch Razorpay credentials
if deployment:
    RAZORPAY_KEY_ID = get_parameter('/suitup/production/RAZORPAY_KEY_ID')
    RAZORPAY_KEY_SECRET = get_parameter('/suitup/production/RAZORPAY_KEY_SECRET')
else:
    RAZORPAY_KEY_ID = os.getenv('RAZORPAY_KEY_ID')
    RAZORPAY_KEY_SECRET = os.getenv('RAZORPAY_KEY_SECRET')

# Email Configuration
if deployment:
    EMAIL_BACKEND = get_parameter('/suitup/production/EMAIL_BACKEND')
    EMAIL_HOST = get_parameter('/suitup/production/EMAIL_HOST')
    EMAIL_PORT = int(get_parameter('/suitup/production/EMAIL_PORT'))  # Convert to int
    EMAIL_HOST_USER = get_parameter('/suitup/production/EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = get_parameter('/suitup/production/EMAIL_HOST_PASSWORD')
    EMAIL_USE_TLS = get_parameter('/suitup/production/EMAIL_USE_TLS') == 'True' # Convert to boolean
else:
    EMAIL_BACKEND = os.getenv('EMAIL_BACKEND')
    EMAIL_HOST = os.getenv('EMAIL_HOST')
    EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))  # Convert to int
    EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
    EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True') == 'True'  # Convert to boolean

